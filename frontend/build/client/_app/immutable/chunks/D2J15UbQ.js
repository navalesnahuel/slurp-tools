const s="http://localhost:3000";async function d(o){if(!o)throw new Error("No image file provided");const r=new FormData;r.append("image",o);try{const a=await fetch(`${s}/image/upload`,{method:"POST",body:r});if(!a.ok){const t=await a.text();throw new Error(`Upload failed: ${t}`)}return await a.json()}catch(a){throw new Error(`Upload Error: ${a.message}`)}}async function w(o,r,a){if(!o)throw new Error("Image UUID is required");if(!r||!a)throw new Error("Width and height are required");const e=[{filter:"resize",params:{width:Number(r),height:Number(a)}}];try{const t=await fetch(`${s}/image/filter/${o}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok){const i=await t.text();throw new Error(`Filter failed: ${i}`)}return await t.json()}catch(t){throw new Error(`Filter Error: ${t.message}`)}}function f(o){if(!o)throw new Error("UUID is required to build image URL");return`${s}/image/${o}/download?t=${Date.now()}`}async function h(o){if(!o)throw new Error("UUID is required to redo changes");try{const r=await fetch(`${s}/image/${o}/redo?t=${Date.now()}`,{method:"GET",headers:{"Content-Type":"application/json"}});if(!r.ok){const e=await r.text();throw new Error(`Redo failed: ${e}`)}return await r.json()}catch(r){throw new Error(`Redo Error: ${r.message}`)}}async function l(o){if(!o)throw new Error("UUID is required to undo changes");try{const r=await fetch(`${s}/image/${o}/undo?t=${Date.now()}`,{method:"GET",headers:{"Content-Type":"application/json"}});if(!r.ok){const e=await r.text();throw new Error(`Undo failed: ${e}`)}return await r.json()}catch(r){throw new Error(`Undo Error: ${r.message}`)}}async function p(o,r){if(!o)throw new Error("Image UUID is required");if(!r||typeof r.width>"u"||typeof r.height>"u"||typeof r.x>"u"||typeof r.y>"u")throw new Error("Valid crop data (width, height, anchor) is required");const a=[{filter:"crop",params:r}];try{const e=await fetch(`${s}/image/filter/${o}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(a)});if(!e.ok){let n=e.statusText;try{n=(await e.json()).message||n}catch{}throw new Error(`Crop filter failed: ${n} (${e.status})`)}const t=await e.json();if(!t.UUID||typeof t.Version>"u")throw new Error("Crop filter response missing UUID or Version.");return t}catch(e){throw new Error(`Crop Filter Error: ${e.message}`)}}async function m(o,r,a="linear"){if(!o)throw new Error("Image UUID is required for rotate filter.");if(typeof r!="number"||isNaN(r))throw new Error("A valid numeric angle is required for rotate filter.");const e=[{filter:"rotate",params:{angle:r,interpolation:a}}];try{const t=await fetch(`${s}/image/filter/${o}`,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)});if(!t.ok){let i=await t.text();try{const c=JSON.parse(i);i=c.message||c.error||JSON.stringify(c)}catch{}throw new Error(`Rotate filter failed: ${t.status} ${i}`)}return await t.json()}catch(t){throw t instanceof Error?t:new Error(`Rotate Filter Network/Processing Error: ${t}`)}}async function g(o,r){if(!o)throw new Error("Image file is required");if(!r||r.length!==4)throw new Error("Exactly 4 corner points are required");if(!Array.isArray(r[0])||r[0].length!==2)throw new Error("Points must be an array of [x, y] arrays");const a=new FormData;a.append("image",o),a.append("points",JSON.stringify(r));try{const e=await fetch(`${s}/image/scan`,{method:"POST",body:a});if(!e.ok){let n=await e.text();try{const i=JSON.parse(n);n=i.message||i.error||n}catch{}throw new Error(`/image/scan failed: ${e.status} ${n}`)}const t=await e.json();if(!t.UUID||typeof t.Version>"u")throw new Error("/image/scan response missing UUID or Version.");return t}catch(e){throw e.message.startsWith("/image/scan failed:")?e:new Error(`/image/scan Network/Processing Error: ${e.message}`)}}async function y(o){try{const r=new FormData;o.forEach(i=>r.append("image",i));const a=await fetch("http://localhost:3000/image/pdf",{method:"POST",body:r});if(!a.ok){const i=await a.text();throw new Error(`Server error: ${i}`)}const e=await a.blob(),t=URL.createObjectURL(e),n=document.createElement("a");n.href=t,n.download="image.pdf",n.click(),URL.revokeObjectURL(t)}catch{alert("Hubo un error al generar el PDF.")}}export{p as a,w as b,m as c,d,f as g,y as i,h as r,g as s,l as u};
